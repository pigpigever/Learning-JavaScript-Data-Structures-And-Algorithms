{"title":"一文盘点那些常见的 JS 数组方法及 Polyfill","date":"2020-07-10T16:00:00.000Z","date_formatted":{"ll":"Jul 11, 2020","L":"07/11/2020","MM-DD":"07-11"},"thumbnail":"/images/API/JS-API.jpeg","link":"2020/07/11/一文盘点那些常见的 JS 数组方法及 Polyfill","updated":"2020-07-11T15:59:27.584Z","content":"<h2 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h2>\n<p>虽然有时候遍历数组只需要 <code>for</code> 循环则足矣，但是如果 API 利用得当，往往能更大程度的提高代码的可读性，减少心智负担～<br>\n当然，本文只涉及到部分 API 的使用及实现，感兴趣的小伙伴也可以自己实现下～</p>\n<h2 id=\"常见的数组-api\">常见的数组 API<a title=\"#常见的数组-api\" href=\"#常见的数组-api\"></a></h2>\n<h3 id=\"array.prototype.some\">Array.prototype.some<a title=\"#array.prototype.some\" href=\"#array.prototype.some\"></a></h3>\n<h4 id=\"功能\">功能<a title=\"#功能\" href=\"#功能\"></a></h4>\n<p>判断数组中是否至少有一个项通过了预设的条件，结果返回 <code>boolean</code>。</p>\n<h4 id=\"参数\">参数<a title=\"#参数\" href=\"#参数\"></a></h4>\n<ul>\n<li><code>callback</code>：执行的回调函数，用于条件判断。</li>\n<li><code>thisArg</code>：执行函数的 <code>this</code> 指针。</li>\n</ul>\n<h4 id=\"场景\">场景<a title=\"#场景\" href=\"#场景\"></a></h4>\n<p>比如我们需要判断数组 [ 1, 2, 3, 5, 6, 7 ] 中是否存在偶数，如果用 <code>for</code> 循环就是这样写的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span> ]</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[i] % <span class=\"number\">2</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>用上了 <code>Array.prototype.some</code> 之后就简洁多了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span> ]</span><br><span class=\"line\"><span class=\"keyword\">return</span> arr.some(<span class=\"function\"><span class=\"params\">a</span> =&gt;</span> a % <span class=\"number\">2</span> === <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"polyfill\">Polyfill<a title=\"#polyfill\" href=\"#polyfill\"></a></h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.some = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, thisArg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 异常处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Cannot read property of null or undefined.'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">`<span class=\"subst\">$&#123;fn&#125;</span> must be a function.`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 需要用 Object 包装一次 this</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> O = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> len = O.length || <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i <span class=\"keyword\">in</span> O) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fn.call(thisArg, O[i], i, O)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"array.prototype.every\">Array.prototype.every<a title=\"#array.prototype.every\" href=\"#array.prototype.every\"></a></h3>\n<h4 id=\"功能-1\">功能<a title=\"#功能-1\" href=\"#功能-1\"></a></h4>\n<h4 id=\"参数-1\">参数<a title=\"#参数-1\" href=\"#参数-1\"></a></h4>\n<h4 id=\"polyfill-1\">Polyfill<a title=\"#polyfill-1\" href=\"#polyfill-1\"></a></h4>\n<h3 id=\"array.prototype.slice\">Array.prototype.slice<a title=\"#array.prototype.slice\" href=\"#array.prototype.slice\"></a></h3>\n<h4 id=\"功能-2\">功能<a title=\"#功能-2\" href=\"#功能-2\"></a></h4>\n<p>浅拷贝数组，可以指定开始和结束下标来对数组某段做拷贝。如果不添加任何参数，那么会直接拷贝整个数组。</p>\n<h4 id=\"参数-2\">参数<a title=\"#参数-2\" href=\"#参数-2\"></a></h4>\n<ul>\n<li><code>begin</code>（可选参数）: 从这个下标开始拷贝，如果为负数，则表示从倒数第 <code>begin</code> 开始拷贝。</li>\n<li><code>end</code>（可选参数）: 从这个下标结束拷贝，如果为负数，则表示从倒数第 <code>end</code> 结束拷贝。</li>\n</ul>\n<h4 id=\"polyfill-2\">Polyfill<a title=\"#polyfill-2\" href=\"#polyfill-2\"></a></h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.slice = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">begin, end</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'cannot read property of null or undefined'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// 如果 end 没有传就默认截到数组末尾</span></span><br><span class=\"line\">      end = (<span class=\"keyword\">typeof</span> end !== <span class=\"string\">'undefined'</span>) ? end : <span class=\"keyword\">this</span>.length</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> cloned = []</span><br><span class=\"line\">      <span class=\"keyword\">const</span> len = <span class=\"keyword\">this</span>.length</span><br><span class=\"line\">      <span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 处理下 begin 参数</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> start = begin || <span class=\"number\">0</span></span><br><span class=\"line\">      start = (start &gt;= <span class=\"number\">0</span>) ? start : <span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, len + start)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> upTo = (<span class=\"keyword\">typeof</span> end == <span class=\"string\">'number'</span>) ? <span class=\"built_in\">Math</span>.min(end, len) : len</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (end &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        upTo = len + end</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">      <span class=\"comment\">// 计算 upTo 到 start 之间的差值</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> size = upTo - start</span><br><span class=\"line\">    </span><br><span class=\"line\">      <span class=\"comment\">// 如果 size &gt; 0 就计算</span></span><br><span class=\"line\">      <span class=\"comment\">// 有 charAt 就用 charAt，没有就直接取下标</span></span><br><span class=\"line\">      <span class=\"comment\">// 然后再拷贝到 cloned 数组中</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (size &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.charAt) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            cloned[i] = <span class=\"keyword\">this</span>.charAt(start + i)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            cloned[i] = <span class=\"keyword\">this</span>[start + i]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> cloned</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n","plink":"http://yoursite.com/2020/07/11/一文盘点那些常见的 JS 数组方法及 Polyfill/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"常见的数组-api","title":"常见的数组 API","index":"2","children":[{"id":"array.prototype.some","title":"Array.prototype.some","index":"2.1"},{"id":"array.prototype.every","title":"Array.prototype.every","index":"2.2"},{"id":"array.prototype.slice","title":"Array.prototype.slice","index":"2.3"}]}]}